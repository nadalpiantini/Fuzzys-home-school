'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  Trophy,
  RotateCcw,
  Home,
  Star,
  Brain,
  BookOpen,
  Beaker,
  Clock,
  MapPin,
  Award,
  Target,
  Sparkles,
  ArrowRight,
  CheckCircle,
  AlertCircle,
  Lightbulb,
  Globe,
  Scroll,
  Shield,
  Users,
  Scale,
  Check,
  X,
} from 'lucide-react';

interface Choice {
  id: string;
  text: string;
  consequence: string;
  points: number;
  nextScenario: string | null;
  educational?: string;
  type: 'good' | 'neutral' | 'bad';
}

interface Scenario {
  id: string;
  title: string;
  description: string;
  situation: string;
  choices: Choice[];
  category: 'science' | 'history' | 'critical-thinking' | 'ethics';
  difficulty: 'easy' | 'medium' | 'hard';
  location?: string;
  character?: string;
  emoji: string;
  backgroundImage?: string;
}

interface GameState {
  currentScenario: string;
  visitedScenarios: string[];
  totalPoints: number;
  decisions: { scenarioId: string; choiceId: string; points: number }[];
  gameComplete: boolean;
  endingType: 'great' | 'good' | 'neutral' | 'poor' | null;
  startTime: Date;
  playTime: number;
}

interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  unlocked: boolean;
  condition: (state: GameState, scenarios: Scenario[]) => boolean;
}

const SCENARIOS: Scenario[] = [
  {
    id: 'lab-start',
    title: 'El Laboratorio Misterioso',
    description: 'Aventura Cient√≠fica',
    situation: 'Eres un estudiante de ciencias que ha sido seleccionado para un proyecto especial. Te encuentras frente a un laboratorio avanzado con equipos que nunca has visto. Tu supervisor te da las llaves y te dice: "Tienes 2 horas para realizar un experimento importante. ¬øQu√© haces primero?"',
    choices: [
      {
        id: 'read-protocols',
        text: 'üìñ Leer todos los protocolos de seguridad',
        consequence: 'Excelente decisi√≥n. Dedicas 20 minutos a leer los manuales de seguridad. Descubres procedimientos importantes que evitar√°n accidentes.',
        points: 15,
        nextScenario: 'lab-experiment',
        educational: 'La seguridad en el laboratorio es lo m√°s importante. Siempre debemos leer los protocolos antes de usar equipos nuevos.',
        type: 'good'
      },
      {
        id: 'start-immediately',
        text: '‚ö° Comenzar el experimento inmediatamente',
        consequence: 'Te apresuras a comenzar sin preparaci√≥n. Aunque tienes m√°s tiempo, cometes errores b√°sicos que podr√≠an ser peligrosos.',
        points: -5,
        nextScenario: 'lab-accident',
        educational: 'La prisa en la ciencia puede llevar a errores costosos. La preparaci√≥n siempre es clave.',
        type: 'bad'
      },
      {
        id: 'ask-colleague',
        text: 'ü§ù Buscar un colega con experiencia',
        consequence: 'Encuentras a una cient√≠fica senior que te da consejos valiosos sobre el experimento. Te sientes m√°s confiado.',
        points: 10,
        nextScenario: 'lab-mentorship',
        educational: 'Colaborar y buscar mentores es fundamental en la ciencia. Nadie tiene que trabajar solo.',
        type: 'good'
      }
    ],
    category: 'science',
    difficulty: 'medium',
    location: 'Laboratorio Central',
    character: 'Estudiante de Ciencias',
    emoji: 'üî¨'
  },
  {
    id: 'lab-experiment',
    title: 'El Experimento Crucial',
    description: 'Decisiones en el Laboratorio',
    situation: 'Despu√©s de leer los protocolos, tienes que decidir qu√© tipo de experimento realizar. Tienes tres opciones importantes que podr√≠an cambiar el rumbo de tu investigaci√≥n.',
    choices: [
      {
        id: 'innovative-approach',
        text: 'üí° Probar una metodolog√≠a innovadora',
        consequence: '¬°Incre√≠ble! Tu enfoque innovador produce resultados inesperados pero prometedores. Has hecho un descubrimiento preliminar.',
        points: 20,
        nextScenario: 'discovery',
        educational: 'La innovaci√≥n cient√≠fica a menudo requiere tomar riesgos calculados.',
        type: 'good'
      },
      {
        id: 'standard-procedure',
        text: 'üìã Seguir el procedimiento est√°ndar',
        consequence: 'Obtienes resultados consistentes y confiables. Aunque no hay sorpresas, tu trabajo es s√≥lido y reproducible.',
        points: 15,
        nextScenario: 'consistent-results',
        educational: 'Los procedimientos est√°ndar son la base de la ciencia confiable.',
        type: 'good'
      },
      {
        id: 'rush-experiment',
        text: '‚è∞ Acelerar para terminar r√°pido',
        consequence: 'La prisa causa errores en las mediciones. Tus resultados son inconsistentes y necesitar√°s repetir el experimento.',
        points: 5,
        nextScenario: 'data-problems',
        educational: 'En ciencia, la precisi√≥n es m√°s importante que la velocidad.',
        type: 'neutral'
      }
    ],
    category: 'science',
    difficulty: 'medium',
    location: 'Laboratorio Central',
    character: 'Estudiante de Ciencias',
    emoji: 'üß™'
  },
  {
    id: 'history-start',
    title: 'El Archivo Secreto',
    description: 'Aventura Hist√≥rica',
    situation: 'Eres un historiador joven que ha descubierto un archivo secreto en la biblioteca de una universidad. Los documentos parecen contener informaci√≥n sobre eventos hist√≥ricos importantes que podr√≠an cambiar nuestra comprensi√≥n del pasado. ¬øQu√© haces?',
    choices: [
      {
        id: 'authenticate-first',
        text: 'üîç Verificar la autenticidad de los documentos',
        consequence: 'Dedicas tiempo a verificar las fechas, el papel y la tinta. Confirmas que los documentos son aut√©nticos y de gran valor hist√≥rico.',
        points: 20,
        nextScenario: 'historical-discovery',
        educational: 'La verificaci√≥n de fuentes es fundamental en la investigaci√≥n hist√≥rica.',
        type: 'good'
      },
      {
        id: 'publish-immediately',
        text: 'üì∞ Publicar el hallazgo inmediatamente',
        consequence: 'Publicas sin verificar. M√°s tarde se descubre que algunos documentos eran falsificaciones. Tu reputaci√≥n se ve afectada.',
        points: -10,
        nextScenario: 'reputation-damage',
        educational: 'La verificaci√≥n debe preceder a la publicaci√≥n en investigaci√≥n hist√≥rica.',
        type: 'bad'
      },
      {
        id: 'consult-experts',
        text: 'üë• Consultar con otros historiadores',
        consequence: 'Formas un equipo de expertos. Juntos, analizan los documentos meticulosamente y hacen un descubrimiento responsable.',
        points: 25,
        nextScenario: 'collaborative-discovery',
        educational: 'La colaboraci√≥n en academia fortalece la investigaci√≥n y reduce errores.',
        type: 'good'
      }
    ],
    category: 'history',
    difficulty: 'hard',
    location: 'Biblioteca Universitaria',
    character: 'Historiador Joven',
    emoji: 'üìú'
  },
  {
    id: 'ethics-dilemma',
    title: 'El Dilema √âtico',
    description: 'Decisiones Morales',
    situation: 'Trabajas en una empresa de tecnolog√≠a y descubres que un nuevo algoritmo de IA que tu equipo est√° desarrollando tiene un sesgo que podr√≠a discriminar contra ciertos grupos de personas. El proyecto tiene una fecha l√≠mite muy ajustada y tu jefe dice que "arreglaremos eso despu√©s del lanzamiento".',
    choices: [
      {
        id: 'refuse-launch',
        text: 'üõë Rechazar el lanzamiento hasta corregir el sesgo',
        consequence: 'Tu posici√≥n firme convence al equipo de retrasar el lanzamiento. Se corrige el sesgo y el producto es m√°s justo, aunque llegue tarde al mercado.',
        points: 30,
        nextScenario: 'ethical-victory',
        educational: 'Los principios √©ticos deben prevalecer sobre las presiones comerciales.',
        type: 'good'
      },
      {
        id: 'document-concerns',
        text: 'üìù Documentar tus preocupaciones por escrito',
        consequence: 'Documentas el problema y lo env√≠as a tu jefe. Aunque el producto se lanza con problemas, tienes evidencia de que alertaste sobre el sesgo.',
        points: 15,
        nextScenario: 'documentation-path',
        educational: 'Documentar preocupaciones √©ticas es importante para la responsabilidad.',
        type: 'neutral'
      },
      {
        id: 'stay-silent',
        text: 'ü§ê Mantenerte en silencio y seguir √≥rdenes',
        consequence: 'El producto se lanza con sesgo. M√°s tarde, cuando el problema se hace p√∫blico, te sientes culpable por no haber actuado.',
        points: -15,
        nextScenario: 'regret-path',
        educational: 'El silencio ante problemas √©ticos puede llevar a consecuencias negativas duraderas.',
        type: 'bad'
      }
    ],
    category: 'ethics',
    difficulty: 'hard',
    location: 'Oficina Corporativa',
    character: 'Desarrollador de IA',
    emoji: '‚öñÔ∏è'
  },
  {
    id: 'discovery',
    title: '¬°Descubrimiento Cient√≠fico!',
    description: 'El Resultado de la Innovaci√≥n',
    situation: 'Tu enfoque innovador ha llevado a un descubrimiento inesperado. Los datos muestran patrones que nadie hab√≠a observado antes. Esto podr√≠a ser el comienzo de una nueva l√≠nea de investigaci√≥n, pero necesitas decidir qu√© hacer con esta informaci√≥n.',
    choices: [
      {
        id: 'peer-review',
        text: 'üî¨ Someter a revisi√≥n por pares inmediatamente',
        consequence: 'El proceso de revisi√≥n valida tu descubrimiento. Publicas en una revista prestigiosa y tu carrera cient√≠fica despega.',
        points: 25,
        nextScenario: null,
        educational: 'La revisi√≥n por pares es esencial para validar descubrimientos cient√≠ficos.',
        type: 'good'
      },
      {
        id: 'more-research',
        text: 'üìä Realizar m√°s experimentos para confirmar',
        consequence: 'Tus experimentos adicionales confirman y expanden el descubrimiento. Cuando publicas, tu trabajo es m√°s s√≥lido y completo.',
        points: 30,
        nextScenario: null,
        educational: 'La replicaci√≥n y confirmaci√≥n fortalecen la credibilidad cient√≠fica.',
        type: 'good'
      }
    ],
    category: 'science',
    difficulty: 'medium',
    location: 'Laboratorio Central',
    character: 'Estudiante de Ciencias',
    emoji: 'üåü'
  },
  {
    id: 'historical-discovery',
    title: 'Documentos Aut√©nticos',
    description: 'Un Hallazgo Hist√≥rico Real',
    situation: 'Has confirmado que los documentos son aut√©nticos y contienen correspondencia entre l√≠deres hist√≥ricos que revela nuevos detalles sobre eventos importantes. Este descubrimiento podr√≠a reescribir parte de la historia.',
    choices: [
      {
        id: 'careful-publication',
        text: 'üìö Publicar con an√°lisis completo',
        consequence: 'Tu publicaci√≥n cuidadosa y bien documentada es aclamada por la comunidad acad√©mica. Cambias la comprensi√≥n de un per√≠odo hist√≥rico importante.',
        points: 35,
        nextScenario: null,
        educational: 'Los grandes descubrimientos hist√≥ricos requieren an√°lisis meticuloso y presentaci√≥n cuidadosa.',
        type: 'good'
      },
      {
        id: 'museum-exhibition',
        text: 'üèõÔ∏è Organizar una exhibici√≥n en museo',
        consequence: 'Creas una exhibici√≥n que educa al p√∫blico sobre el descubrimiento. Tu trabajo llega a miles de personas y despierte el inter√©s en la historia.',
        points: 30,
        nextScenario: null,
        educational: 'Compartir descubrimientos hist√≥ricos con el p√∫blico amplia el impacto educativo.',
        type: 'good'
      }
    ],
    category: 'history',
    difficulty: 'hard',
    location: 'Biblioteca Universitaria',
    character: 'Historiador Joven',
    emoji: 'üèÜ'
  }
];

const INITIAL_ACHIEVEMENTS: Achievement[] = [
  {
    id: 'safety-first',
    title: 'Seguridad Primero',
    description: 'Priorizar la seguridad en el laboratorio',
    icon: <Shield className="w-5 h-5" />,
    unlocked: false,
    condition: (state) => state.decisions.some(d => d.choiceId === 'read-protocols')
  },
  {
    id: 'innovative-thinker',
    title: 'Pensador Innovador',
    description: 'Elegir enfoques creativos e innovadores',
    icon: <Lightbulb className="w-5 h-5" />,
    unlocked: false,
    condition: (state) => state.decisions.some(d => d.choiceId === 'innovative-approach')
  },
  {
    id: 'ethical-champion',
    title: 'Campe√≥n √âtico',
    description: 'Tomar decisiones √©ticamente correctas',
    icon: <Award className="w-5 h-5" />,
    unlocked: false,
    condition: (state) => state.decisions.some(d => d.choiceId === 'refuse-launch')
  },
  {
    id: 'collaboration-master',
    title: 'Maestro de Colaboraci√≥n',
    description: 'Buscar ayuda y trabajar en equipo',
    icon: <Users className="w-5 h-5" />,
    unlocked: false,
    condition: (state) => state.decisions.some(d => ['ask-colleague', 'consult-experts'].includes(d.choiceId))
  },
  {
    id: 'perfectionist',
    title: 'Perfeccionista',
    description: 'Obtener m√°s de 100 puntos totales',
    icon: <Target className="w-5 h-5" />,
    unlocked: false,
    condition: (state) => state.totalPoints >= 100
  }
];

export default function BranchingScenarioGame() {
  const router = useRouter();
  const [gameState, setGameState] = useState<GameState>({
    currentScenario: '',
    visitedScenarios: [],
    totalPoints: 0,
    decisions: [],
    gameComplete: false,
    endingType: null,
    startTime: new Date(),
    playTime: 0
  });

  const [selectedScenario, setSelectedScenario] = useState<string | null>(null);
  const [showChoice, setShowChoice] = useState(false);
  const [lastChoice, setLastChoice] = useState<Choice | null>(null);
  const [achievements, setAchievements] = useState<Achievement[]>(INITIAL_ACHIEVEMENTS);
  const [showAchievements, setShowAchievements] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);

  // Timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (gameStarted && !gameState.gameComplete) {
      interval = setInterval(() => {
        setGameState(prev => ({
          ...prev,
          playTime: Math.floor((Date.now() - prev.startTime.getTime()) / 1000)
        }));
      }, 1000);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [gameStarted, gameState.gameComplete]);

  // Check achievements
  useEffect(() => {
    const updatedAchievements = achievements.map(achievement => ({
      ...achievement,
      unlocked: achievement.unlocked || achievement.condition(gameState, SCENARIOS)
    }));

    setAchievements(updatedAchievements);
  }, [gameState.decisions]);

  const currentScenario = SCENARIOS.find(s => s.id === gameState.currentScenario);

  const startGame = (scenarioId: string) => {
    setGameState({
      currentScenario: scenarioId,
      visitedScenarios: [scenarioId],
      totalPoints: 0,
      decisions: [],
      gameComplete: false,
      endingType: null,
      startTime: new Date(),
      playTime: 0
    });
    setGameStarted(true);
    setSelectedScenario(null);
    setShowChoice(false);
    setLastChoice(null);
  };

  const makeChoice = (choice: Choice) => {
    const newDecision = {
      scenarioId: gameState.currentScenario,
      choiceId: choice.id,
      points: choice.points
    };

    setLastChoice(choice);
    setShowChoice(true);

    setTimeout(() => {
      setGameState(prev => {
        const newTotalPoints = prev.totalPoints + choice.points;
        let endingType: 'great' | 'good' | 'neutral' | 'poor' | null = null;
        let gameComplete = false;

        if (!choice.nextScenario) {
          gameComplete = true;
          if (newTotalPoints >= 80) endingType = 'great';
          else if (newTotalPoints >= 50) endingType = 'good';
          else if (newTotalPoints >= 20) endingType = 'neutral';
          else endingType = 'poor';
        }

        return {
          ...prev,
          currentScenario: choice.nextScenario || prev.currentScenario,
          visitedScenarios: choice.nextScenario
            ? [...prev.visitedScenarios, choice.nextScenario]
            : prev.visitedScenarios,
          totalPoints: newTotalPoints,
          decisions: [...prev.decisions, newDecision],
          gameComplete,
          endingType
        };
      });

      setShowChoice(false);
      setLastChoice(null);
    }, 3000);
  };

  const resetGame = () => {
    setGameState({
      currentScenario: '',
      visitedScenarios: [],
      totalPoints: 0,
      decisions: [],
      gameComplete: false,
      endingType: null,
      startTime: new Date(),
      playTime: 0
    });
    setGameStarted(false);
    setSelectedScenario(null);
    setShowChoice(false);
    setLastChoice(null);
    setAchievements(INITIAL_ACHIEVEMENTS);
  };

  const getScenariosByCategory = (category: string) => {
    return SCENARIOS.filter(s => s.category === category && !s.id.includes('-'));
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getEndingMessage = (type: string) => {
    switch (type) {
      case 'great':
        return {
          title: '¬°Excelente Aventurero!',
          message: 'Has tomado decisiones excepcionales que demuestran sabidur√≠a, √©tica y pensamiento cr√≠tico.',
          emoji: 'üèÜ',
          color: 'text-yellow-600'
        };
      case 'good':
        return {
          title: '¬°Buen Trabajo!',
          message: 'Has tomado decisiones s√≥lidas y aprendido lecciones valiosas en tu aventura.',
          emoji: 'üåü',
          color: 'text-green-600'
        };
      case 'neutral':
        return {
          title: 'Aventura Completada',
          message: 'Has completado la aventura con resultados mixtos. ¬°Siempre hay oportunidades para mejorar!',
          emoji: 'üìö',
          color: 'text-blue-600'
        };
      case 'poor':
        return {
          title: 'Aprende de la Experiencia',
          message: 'Esta aventura te ha ense√±ado lecciones importantes. ¬°Int√©ntalo de nuevo con lo que has aprendido!',
          emoji: 'üéØ',
          color: 'text-orange-600'
        };
      default:
        return {
          title: 'Aventura',
          message: 'Contin√∫a tu viaje de aprendizaje.',
          emoji: 'üéÆ',
          color: 'text-gray-600'
        };
    }
  };

  const getCategoryInfo = (category: string) => {
    switch (category) {
      case 'science':
        return {
          title: 'Aventura Cient√≠fica',
          description: 'Explora el mundo de la ciencia y toma decisiones como un verdadero cient√≠fico',
          icon: <Beaker className="w-6 h-6" />,
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'bg-blue-50'
        };
      case 'history':
        return {
          title: 'Aventura Hist√≥rica',
          description: 'Vive experiencias del pasado y aprende lecciones de la historia',
          icon: <Scroll className="w-6 h-6" />,
          color: 'from-amber-500 to-orange-500',
          bgColor: 'bg-amber-50'
        };
      case 'ethics':
        return {
          title: 'Dilemas √âticos',
          description: 'Enfrenta decisiones morales complejas y desarrolla tu br√∫jula √©tica',
          icon: <Scale className="w-6 h-6" />,
          color: 'from-purple-500 to-pink-500',
          bgColor: 'bg-purple-50'
        };
      case 'critical-thinking':
        return {
          title: 'Pensamiento Cr√≠tico',
          description: 'Desarrolla habilidades de an√°lisis y resoluci√≥n de problemas complejos',
          icon: <Brain className="w-6 h-6" />,
          color: 'from-green-500 to-teal-500',
          bgColor: 'bg-green-50'
        };
      default:
        return {
          title: 'Aventura',
          description: 'Una aventura educativa',
          icon: <BookOpen className="w-6 h-6" />,
          color: 'from-gray-500 to-gray-600',
          bgColor: 'bg-gray-50'
        };
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-100 via-purple-100 to-pink-100">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md shadow-sm border-b border-white/20 sticky top-0 z-10">
        <div className="container mx-auto px-4 sm:px-6 py-4">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl text-white">
                <BookOpen className="w-6 h-6" />
              </div>
              <div>
                <h1 className="text-xl sm:text-2xl font-bold text-gray-900">
                  üå≥ Aventura de Decisiones
                </h1>
                <p className="text-sm text-gray-600">
                  ¬°Elige tu propia aventura educativa!
                </p>
              </div>
            </div>

            <div className="flex items-center gap-2">
              {gameStarted && (
                <div className="flex items-center gap-4 text-sm">
                  <div className="flex items-center gap-1">
                    <Clock className="w-4 h-4 text-gray-600" />
                    <span>{formatTime(gameState.playTime)}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Star className="w-4 h-4 text-yellow-600" />
                    <span className="font-bold">{gameState.totalPoints}</span>
                  </div>
                </div>
              )}

              <Button
                variant="outline"
                onClick={() => router.push('/games')}
                className="bg-white/50 hover:bg-white/80"
              >
                <Home className="w-4 h-4 mr-2" />
                Volver a Juegos
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Game Progress */}
      {gameStarted && !gameState.gameComplete && (
        <section className="container mx-auto px-4 sm:px-6 py-4">
          <div className="bg-white/60 backdrop-blur-sm rounded-2xl p-4 border border-white/20">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-700">
                Progreso de Aventura
              </span>
              <span className="text-sm text-gray-600">
                {gameState.visitedScenarios.length} escenarios visitados
              </span>
            </div>
            <Progress
              value={(gameState.visitedScenarios.length / 5) * 100}
              className="h-2"
            />
          </div>
        </section>
      )}

      {/* Game Selection */}
      {!gameStarted && (
        <section className="container mx-auto px-4 sm:px-6 py-8">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">
              Elige Tu Aventura Educativa
            </h2>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Cada aventura te llevar√° por un camino diferente lleno de decisiones importantes.
              Tus elecciones determinar√°n el resultado y las lecciones que aprender√°s.
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {['science', 'history', 'ethics'].map(category => {
              const categoryInfo = getCategoryInfo(category);
              const scenarios = getScenariosByCategory(category);

              return (
                <Card
                  key={category}
                  className={`${categoryInfo.bgColor} border-2 hover:shadow-lg transition-all duration-300 cursor-pointer group`}
                  onClick={() => {
                    if (scenarios.length > 0) {
                      startGame(scenarios[0].id);
                    }
                  }}
                >
                  <CardHeader className="text-center">
                    <div className={`mx-auto p-3 rounded-full bg-gradient-to-r ${categoryInfo.color} text-white mb-4 group-hover:scale-110 transition-transform`}>
                      {categoryInfo.icon}
                    </div>
                    <CardTitle className="text-xl group-hover:text-purple-600 transition-colors">
                      {categoryInfo.title}
                    </CardTitle>
                    <p className="text-gray-600">
                      {categoryInfo.description}
                    </p>
                  </CardHeader>
                  <CardContent>
                    {scenarios.map(scenario => (
                      <div key={scenario.id} className="flex items-center gap-2 mb-2">
                        <span className="text-2xl">{scenario.emoji}</span>
                        <div>
                          <div className="font-medium text-sm">{scenario.title}</div>
                          <div className="text-xs text-gray-600">{scenario.description}</div>
                        </div>
                      </div>
                    ))}
                    <Button className={`w-full mt-4 bg-gradient-to-r ${categoryInfo.color} text-white hover:opacity-90`}>
                      <ArrowRight className="w-4 h-4 mr-2" />
                      Comenzar Aventura
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>

          {/* Achievements Preview */}
          <div className="mt-12">
            <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">
              üèÜ Logros Disponibles
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
              {INITIAL_ACHIEVEMENTS.map(achievement => (
                <div
                  key={achievement.id}
                  className="bg-white/60 rounded-xl p-4 text-center border border-white/20"
                >
                  <div className="text-gray-400 mb-2">
                    {achievement.icon}
                  </div>
                  <div className="text-sm font-medium text-gray-700 mb-1">
                    {achievement.title}
                  </div>
                  <div className="text-xs text-gray-600">
                    {achievement.description}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Current Scenario */}
      {gameStarted && currentScenario && !gameState.gameComplete && !showChoice && (
        <section className="container mx-auto px-4 sm:px-6 py-6">
          <Card className="max-w-4xl mx-auto bg-white/80 backdrop-blur-sm border-2 border-white/20">
            <CardHeader>
              <div className="flex items-center gap-3 mb-4">
                <div className="text-4xl">{currentScenario.emoji}</div>
                <div>
                  <CardTitle className="text-2xl text-gray-900">
                    {currentScenario.title}
                  </CardTitle>
                  <div className="flex items-center gap-4 mt-2">
                    <Badge variant="outline" className="bg-white/50">
                      {getCategoryInfo(currentScenario.category).title}
                    </Badge>
                    {currentScenario.location && (
                      <div className="flex items-center gap-1 text-sm text-gray-600">
                        <MapPin className="w-4 h-4" />
                        {currentScenario.location}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 mb-6">
                <p className="text-gray-800 leading-relaxed text-lg">
                  {currentScenario.situation}
                </p>
              </div>

              <h3 className="text-xl font-bold text-gray-900 mb-4">
                ¬øQu√© decides hacer?
              </h3>

              <div className="space-y-4">
                {currentScenario.choices.map(choice => (
                  <Button
                    key={choice.id}
                    onClick={() => makeChoice(choice)}
                    className={`w-full p-4 h-auto text-left justify-start ${
                      choice.type === 'good' ? 'bg-green-50 hover:bg-green-100 text-green-800 border-green-300' :
                      choice.type === 'bad' ? 'bg-red-50 hover:bg-red-100 text-red-800 border-red-300' :
                      'bg-blue-50 hover:bg-blue-100 text-blue-800 border-blue-300'
                    } border-2`}
                    variant="outline"
                  >
                    <div className="text-left">
                      <div className="font-medium mb-1">{choice.text}</div>
                      <div className="text-sm opacity-80">
                        {choice.points > 0 ? '+' : ''}{choice.points} puntos
                      </div>
                    </div>
                  </Button>
                ))}
              </div>
            </CardContent>
          </Card>
        </section>
      )}

      {/* Choice Consequence */}
      {showChoice && lastChoice && (
        <section className="container mx-auto px-4 sm:px-6 py-6">
          <Card className="max-w-3xl mx-auto bg-white/90 backdrop-blur-sm border-2 border-white/20">
            <CardContent className="p-8 text-center">
              <div className="text-6xl mb-4">
                {lastChoice.type === 'good' ? '‚úÖ' : lastChoice.type === 'bad' ? '‚ùå' : '‚ö†Ô∏è'}
              </div>

              <h3 className="text-2xl font-bold text-gray-900 mb-4">
                Consecuencia de tu Decisi√≥n
              </h3>

              <p className="text-gray-800 text-lg mb-6 leading-relaxed">
                {lastChoice.consequence}
              </p>

              {lastChoice.educational && (
                <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl p-4 border border-yellow-200">
                  <div className="flex items-start gap-3">
                    <Lightbulb className="w-5 h-5 text-yellow-600 mt-1" />
                    <div>
                      <div className="font-medium text-yellow-800 mb-1">
                        Lecci√≥n Aprendida:
                      </div>
                      <div className="text-yellow-700 text-sm">
                        {lastChoice.educational}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div className="mt-6">
                <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full ${
                  lastChoice.points > 0 ? 'bg-green-100 text-green-800' :
                  lastChoice.points < 0 ? 'bg-red-100 text-red-800' :
                  'bg-gray-100 text-gray-800'
                }`}>
                  <Star className="w-4 h-4" />
                  {lastChoice.points > 0 ? '+' : ''}{lastChoice.points} puntos
                </div>
              </div>
            </CardContent>
          </Card>
        </section>
      )}

      {/* Game Complete */}
      {gameState.gameComplete && (
        <section className="container mx-auto px-4 sm:px-6 py-8">
          <Card className="max-w-4xl mx-auto bg-white/90 backdrop-blur-sm border-2 border-white/20">
            <CardContent className="p-8 text-center">
              <div className="text-8xl mb-6">
                {getEndingMessage(gameState.endingType || '').emoji}
              </div>

              <h2 className={`text-3xl font-bold mb-4 ${getEndingMessage(gameState.endingType || '').color}`}>
                {getEndingMessage(gameState.endingType || '').title}
              </h2>

              <p className="text-gray-700 text-lg mb-8 max-w-2xl mx-auto">
                {getEndingMessage(gameState.endingType || '').message}
              </p>

              {/* Final Stats */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
                <div className="bg-blue-50 rounded-xl p-4">
                  <div className="text-2xl font-bold text-blue-600 mb-1">
                    {gameState.totalPoints}
                  </div>
                  <div className="text-sm text-blue-700">Puntos Totales</div>
                </div>
                <div className="bg-green-50 rounded-xl p-4">
                  <div className="text-2xl font-bold text-green-600 mb-1">
                    {gameState.decisions.length}
                  </div>
                  <div className="text-sm text-green-700">Decisiones</div>
                </div>
                <div className="bg-purple-50 rounded-xl p-4">
                  <div className="text-2xl font-bold text-purple-600 mb-1">
                    {gameState.visitedScenarios.length}
                  </div>
                  <div className="text-sm text-purple-700">Escenarios</div>
                </div>
                <div className="bg-yellow-50 rounded-xl p-4">
                  <div className="text-2xl font-bold text-yellow-600 mb-1">
                    {formatTime(gameState.playTime)}
                  </div>
                  <div className="text-sm text-yellow-700">Tiempo</div>
                </div>
              </div>

              {/* Achievements Unlocked */}
              <div className="mb-8">
                <h3 className="text-xl font-bold text-gray-900 mb-4">
                  üèÜ Logros Desbloqueados
                </h3>
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                  {achievements.map(achievement => (
                    <div
                      key={achievement.id}
                      className={`rounded-xl p-4 text-center border-2 transition-all ${
                        achievement.unlocked
                          ? 'bg-yellow-50 border-yellow-300 transform scale-105'
                          : 'bg-gray-50 border-gray-200 opacity-50'
                      }`}
                    >
                      <div className={`mb-2 ${achievement.unlocked ? 'text-yellow-600' : 'text-gray-400'}`}>
                        {achievement.icon}
                      </div>
                      <div className={`text-sm font-medium mb-1 ${
                        achievement.unlocked ? 'text-yellow-800' : 'text-gray-600'
                      }`}>
                        {achievement.title}
                      </div>
                      <div className={`text-xs ${
                        achievement.unlocked ? 'text-yellow-700' : 'text-gray-500'
                      }`}>
                        {achievement.description}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  onClick={resetGame}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600"
                  size="lg"
                >
                  <RotateCcw className="w-5 h-5 mr-2" />
                  Nueva Aventura
                </Button>
                <Button
                  variant="outline"
                  onClick={() => router.push('/games')}
                  size="lg"
                >
                  <Home className="w-5 h-5 mr-2" />
                  Otros Juegos
                </Button>
              </div>
            </CardContent>
          </Card>
        </section>
      )}

      {/* Call to Action */}
      {!gameStarted && (
        <section className="bg-gradient-to-r from-purple-500/80 to-pink-500/80 backdrop-blur-sm text-white py-12">
          <div className="container mx-auto px-6 text-center">
            <h2 className="text-3xl font-bold mb-4">
              ¬°Cada Decisi√≥n Cuenta!
            </h2>
            <p className="text-purple-100 mb-8 max-w-2xl mx-auto">
              En estas aventuras educativas, aprender√°s que cada decisi√≥n tiene consecuencias.
              Desarrolla tu pensamiento cr√≠tico y habilidades para la vida mientras vives emocionantes historias.
            </p>
            <div className="flex flex-wrap justify-center gap-4">
              <div className="bg-white/20 rounded-lg p-4">
                <div className="text-2xl font-bold">3</div>
                <div className="text-sm">Aventuras √önicas</div>
              </div>
              <div className="bg-white/20 rounded-lg p-4">
                <div className="text-2xl font-bold">15+</div>
                <div className="text-sm">Decisiones Importantes</div>
              </div>
              <div className="bg-white/20 rounded-lg p-4">
                <div className="text-2xl font-bold">5</div>
                <div className="text-sm">Logros Especiales</div>
              </div>
            </div>
          </div>
        </section>
      )}
    </div>
  );
}